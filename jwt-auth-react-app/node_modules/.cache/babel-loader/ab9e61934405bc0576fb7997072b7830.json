{"ast":null,"code":"import axios from \"axios\";\nimport api from \"./_api.js\";\nimport RoleModel from './../models/RoleModel';\n\nclass AuthService {\n  doBasicAuth(username, password) {\n    console.log(username + \" \" + password);\n    let authHeader = this.getAuthHeader(username, password);\n    return api.post('auth/token', {\n      username: username,\n      password: password\n    });\n  }\n\n  getRoles(userName) {\n    return api.get(`roles/${userName}`);\n  }\n\n  registerLogin(userName, password, userId, roleName) {\n    console.log('registerLogin called...');\n    sessionStorage.setItem('userName', userName);\n    sessionStorage.setItem('userId', userId);\n    let authHeader = this.getAuthHeader(userName, password);\n    sessionStorage.setItem('authHeader', authHeader); //this.setupAxiosInterceptorForRequest (authHeader)\n  }\n\n  registerLogin(flag, user) {\n    console.log('registerLogin called...');\n    sessionStorage.setItem('userName', user.userName);\n    sessionStorage.setItem('userId', user.userId);\n    let authHeader = this.getAuthHeader(user.userName, user.password);\n    sessionStorage.setItem('authHeader', authHeader); //this.setupAxiosInterceptorForRequest (authHeader)\n\n    sessionStorage.setItem('isAuthenticated', flag);\n    sessionStorage.setItem('user', JSON.stringify(user));\n  }\n\n  setupAxiosInterceptorForRequest(authHeader) {\n    console.log('interceptors called');\n    axios.interceptors.request.use(config => {\n      if (this.isUserAuthenticated()) {\n        config.headers['authorization'] = authHeader;\n      }\n\n      return config;\n    });\n  }\n\n  UnregisterLogin(userName) {\n    sessionStorage.removeItem('userName');\n    sessionStorage.removeItem('userId');\n    sessionStorage.removeItem('authHeader');\n    sessionStorage.removeItem('user');\n    sessionStorage.removeItem('isAuthenticated');\n  }\n\n  getLoggedInUserName() {\n    return sessionStorage.getItem('userName');\n  }\n\n  getLoggedInUserRoleName() {\n    return sessionStorage.getItem('roleName');\n  }\n\n  getLoggedInUserId() {\n    return sessionStorage.getItem('userId');\n  }\n\n  getAuthHeader(userName, password) {\n    return 'Basic ' + window.btoa(userName + \":\" + password);\n  }\n\n  isUserAuthenticated() {\n    let userName = sessionStorage.getItem('authHeader');\n    console.log(userName);\n\n    if (userName) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["E:/k.vadivelmurugan/token-auth-sample/jwt-auth-react-app/src/services/AuthService.js"],"names":["axios","api","RoleModel","AuthService","doBasicAuth","username","password","console","log","authHeader","getAuthHeader","post","getRoles","userName","get","registerLogin","userId","roleName","sessionStorage","setItem","flag","user","JSON","stringify","setupAxiosInterceptorForRequest","interceptors","request","use","config","isUserAuthenticated","headers","UnregisterLogin","removeItem","getLoggedInUserName","getItem","getLoggedInUserRoleName","getLoggedInUserId","window","btoa"],"mappings":"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","sourcesContent":["import axios from \"axios\"\r\n\r\nimport api from \"./_api.js\"\r\nimport RoleModel from './../models/RoleModel'\r\nclass AuthService {\r\n\r\n    doBasicAuth (username, password) {\r\n        console.log (username + \" \" + password)\r\n\r\n        let authHeader = this.getAuthHeader (username, password)\r\n\r\n        return api.post ('auth/token', \r\n            {username : username,\r\n            password : password })\r\n    }\r\n\r\n    getRoles (userName) {\r\n        return api.get (`roles/${userName}`)\r\n    }\r\n\r\n    registerLogin (userName, password, userId, roleName) {\r\n        console.log ('registerLogin called...')\r\n        sessionStorage.setItem('userName', userName)\r\n        sessionStorage.setItem('userId', userId)\r\n\r\n        let authHeader = this.getAuthHeader(userName, password)\r\n        sessionStorage.setItem('authHeader', authHeader)\r\n        //this.setupAxiosInterceptorForRequest (authHeader)\r\n    }\r\n\r\n    registerLogin (flag, user) {\r\n        console.log ('registerLogin called...')\r\n        sessionStorage.setItem('userName', user.userName)\r\n        sessionStorage.setItem('userId', user.userId)\r\n\r\n        let authHeader = this.getAuthHeader(user.userName, user.password)\r\n        sessionStorage.setItem('authHeader', authHeader)\r\n        //this.setupAxiosInterceptorForRequest (authHeader)\r\n        sessionStorage.setItem ('isAuthenticated', flag)\r\n        sessionStorage.setItem ('user', JSON.stringify(user))\r\n    }\r\n\r\n    setupAxiosInterceptorForRequest (authHeader) {\r\n        console.log ('interceptors called') \r\n        axios.interceptors.request.use (\r\n            (config) => {\r\n                if (this.isUserAuthenticated ()) {                                       \r\n                    config.headers['authorization'] = authHeader                  \r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n\r\n    UnregisterLogin (userName) {\r\n        sessionStorage.removeItem('userName')\r\n        sessionStorage.removeItem('userId')\r\n        sessionStorage.removeItem('authHeader')\r\n        sessionStorage.removeItem('user')\r\n        sessionStorage.removeItem ('isAuthenticated')\r\n    } \r\n\r\n    getLoggedInUserName() {\r\n        return sessionStorage.getItem ('userName');\r\n    }\r\n\r\n    getLoggedInUserRoleName() {\r\n        return sessionStorage.getItem ('roleName');\r\n    }\r\n\r\n    getLoggedInUserId() {\r\n        return sessionStorage.getItem ('userId');\r\n    }\r\n\r\n    getAuthHeader (userName, password) {\r\n        return 'Basic ' + window.btoa(userName + \":\" + password)\r\n    }\r\n\r\n    isUserAuthenticated () {\r\n        let userName = sessionStorage.getItem ('authHeader')\r\n        console.log (userName)\r\n        if (userName) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n}\r\n\r\nexport default new AuthService()"]},"metadata":{},"sourceType":"module"}